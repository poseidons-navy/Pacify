import * as __internal_types from '../internal/types.cjs';
import { FileRouter, RouteHandlerOptions } from '../internal/types.cjs';
export { FileRouter, UTFiles } from '../internal/types.cjs';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json, UploadThingError } from '@uploadthing/shared';
import { NextApiRequest, NextApiResponse } from 'next';

type CreateBuilderOptions<TErrorShape extends Json> = {
    errorFormatter: (err: UploadThingError) => TErrorShape;
};

type MiddlewareArgs = {
    req: NextApiRequest;
    res: NextApiResponse;
    event: undefined;
};
declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape>) => (input: _uploadthing_shared.FileRouterInputConfig) => __internal_types.UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _middlewareArgs: MiddlewareArgs;
    _errorShape: TErrorShape;
    _errorFn: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _output: "unsetMarker" & {
        __brand: "unsetMarker";
    };
}>;
declare const createRouteHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => (req: NextApiRequest, res: NextApiResponse) => Promise<void>;
/**
 * @deprecated Use {@link createRouteHandler} instead
 */
declare const createNextPageApiHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => (req: NextApiRequest, res: NextApiResponse) => Promise<void>;

export { createNextPageApiHandler, createRouteHandler, createUploadthing };
