import * as __internal_types from '../internal/types.js';
import { FileRouter, RouteHandlerOptions } from '../internal/types.js';
export { FileRouter, UTFiles } from '../internal/types.js';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json, UploadThingError } from '@uploadthing/shared';
import { Router, Request, Response } from 'express';

type CreateBuilderOptions<TErrorShape extends Json> = {
    errorFormatter: (err: UploadThingError) => TErrorShape;
};

type MiddlewareArgs = {
    req: Request;
    res: Response;
    event: undefined;
};
declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape>) => (input: _uploadthing_shared.FileRouterInputConfig) => __internal_types.UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _middlewareArgs: MiddlewareArgs;
    _errorShape: TErrorShape;
    _errorFn: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _output: "unsetMarker" & {
        __brand: "unsetMarker";
    };
}>;
declare const createRouteHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => Router;
/**
 * @deprecated Use {@link createRouteHandler} instead
 */
declare const createUploadthingExpressHandler: <TRouter extends FileRouter>(opts: RouteHandlerOptions<TRouter>) => Router;

export { createRouteHandler, createUploadthing, createUploadthingExpressHandler };
