import * as svelte_store from 'svelte/store';
import { Action } from 'svelte/action';

type AcceptProp = Record<string, string[]>;
type DropzoneOptions = {
    multiple?: boolean;
    accept?: AcceptProp;
    minSize?: number;
    maxSize?: number;
    maxFiles?: number;
    disabled?: boolean;
    onDrop: <T extends File>(acceptedFiles: T[]) => void;
};
type DropzoneState = {
    isFocused: boolean;
    isDragActive: boolean;
    isDragAccept: boolean;
    isDragReject: boolean;
    isFileDialogActive: boolean;
    acceptedFiles: File[];
};

type DropEvent = InputEvent | DragEvent | Event;
declare function createDropzone(_props: DropzoneOptions): {
    state: {
        readonly subscribe: (this: void, run: svelte_store.Subscriber<{
            isFocused: boolean;
            isFileDialogActive: boolean;
            isDragActive: boolean;
            isDragAccept: boolean;
            isDragReject: boolean;
            acceptedFiles: File[];
        }>, invalidate?: svelte_store.Invalidator<{
            isFocused: boolean;
            isFileDialogActive: boolean;
            isDragActive: boolean;
            isDragAccept: boolean;
            isDragReject: boolean;
            acceptedFiles: File[];
        }> | undefined) => svelte_store.Unsubscriber;
    };
    dropzoneRoot: Action<HTMLElement, undefined, Record<never, any>>;
    dropzoneInput: Action<HTMLInputElement, DropzoneOptions, Record<never, any>>;
    rootRef: svelte_store.Writable<HTMLElement | null>;
};

export { type AcceptProp, type DropEvent, type DropzoneOptions, type DropzoneState, createDropzone };
