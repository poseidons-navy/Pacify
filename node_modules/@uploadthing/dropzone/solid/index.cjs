Object.defineProperty(exports, '__esModule', { value: true });

var fileSelector = require('file-selector');
var solidJs = require('solid-js');
var store = require('solid-js/store');
var core = require('@uploadthing/dropzone/core');

function createDropzone(_props) {
    const props = solidJs.mergeProps({
        disabled: false,
        maxSize: Number.POSITIVE_INFINITY,
        minSize: 0,
        multiple: true,
        maxFiles: 0
    }, _props);
    const acceptAttr = solidJs.createMemo(()=>core.acceptPropAsAcceptAttr(props.accept));
    const [rootRef, setRootRef] = solidJs.createSignal();
    const [inputRef, setInputRef] = solidJs.createSignal();
    let dragTargets = [];
    const [state, setState] = store.createStore(core.initialState);
    solidJs.createEffect(()=>{
        const onWindowFocus = ()=>{
            if (state.isFileDialogActive) {
                setTimeout(()=>{
                    const input = inputRef();
                    if (input) {
                        const { files } = input;
                        if (!files?.length) {
                            setState("isFileDialogActive", false);
                        }
                    }
                }, 300);
            }
        };
        window.addEventListener("focus", onWindowFocus, false);
        solidJs.onCleanup(()=>{
            window.removeEventListener("focus", onWindowFocus, false);
        });
    });
    solidJs.createEffect(()=>{
        const onDocumentDrop = (event)=>{
            const root = rootRef();
            // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler
            if (root?.contains(event.target)) return;
            event.preventDefault();
            dragTargets = [];
        };
        const onDocumentDragOver = (e)=>e.preventDefault();
        document.addEventListener("dragover", onDocumentDragOver, false);
        document.addEventListener("drop", onDocumentDrop, false);
        solidJs.onCleanup(()=>{
            document.removeEventListener("dragover", onDocumentDragOver, false);
            document.removeEventListener("drop", onDocumentDrop, false);
        });
    });
    function isPropagationStopped(event) {
        if (typeof event.cancelBubble !== "undefined") {
            return event.cancelBubble;
        }
        return false;
    }
    const onDragEnter = (event)=>{
        event.preventDefault();
        event.stopPropagation();
        dragTargets = [
            ...dragTargets,
            event.target
        ];
        if (core.isEventWithFiles(event)) {
            Promise.resolve(fileSelector.fromEvent(event)).then((files)=>{
                if (isPropagationStopped(event)) return;
                const fileCount = files.length;
                const isDragAccept = fileCount > 0 && core.allFilesAccepted({
                    files: files,
                    accept: acceptAttr(),
                    minSize: props.minSize,
                    maxSize: props.maxSize,
                    multiple: props.multiple,
                    maxFiles: props.maxFiles
                });
                const isDragReject = fileCount > 0 && !isDragAccept;
                setState({
                    isDragAccept,
                    isDragReject,
                    isDragActive: true
                });
            }).catch(core.noop);
        }
    };
    const onDragOver = (event)=>{
        event.preventDefault();
        event.stopPropagation();
        const hasFiles = core.isEventWithFiles(event);
        if (hasFiles && event.dataTransfer) {
            try {
                event.dataTransfer.dropEffect = "copy";
            } catch  {
                core.noop();
            }
        }
        return false;
    };
    const onDragLeave = (event)=>{
        event.preventDefault();
        event.stopPropagation();
        const root = rootRef();
        // Only deactivate once the dropzone and all children have been left
        const targets = dragTargets.filter((target)=>root?.contains(target));
        // Make sure to remove a target present multiple times only once
        // (Firefox may fire dragenter/dragleave multiple times on the same element)
        const targetIdx = targets.indexOf(event.target);
        if (targetIdx !== -1) {
            targets.splice(targetIdx, 1);
        }
        dragTargets = targets;
        if (targets.length > 0) {
            return;
        }
        setState({
            isDragActive: false,
            isDragAccept: false,
            isDragReject: false
        });
    };
    const setFiles = (files)=>{
        const acceptedFiles = [];
        files.forEach((file)=>{
            const accepted = core.isFileAccepted(file, acceptAttr());
            const sizeMatch = core.isValidSize(file, props.minSize, props.maxSize);
            if (accepted && sizeMatch) {
                acceptedFiles.push(file);
            }
        });
        if (core.isValidQuantity(acceptedFiles, props.multiple, props.maxFiles)) {
            acceptedFiles.splice(0);
        }
        setState({
            acceptedFiles
        });
        props.onDrop?.(acceptedFiles);
    };
    const onDrop = (event)=>{
        event.preventDefault();
        event.stopPropagation();
        dragTargets = [];
        if (core.isEventWithFiles(event)) {
            Promise.resolve(fileSelector.fromEvent(event)).then((files)=>{
                if (isPropagationStopped(event)) {
                    return;
                }
                setFiles(files);
            }).catch(core.noop);
        }
        setState(core.initialState);
    };
    const openFileDialog = ()=>{
        const input = inputRef();
        if (input) {
            setState("isFileDialogActive", true);
            input.value = "";
            input.click();
        }
    };
    const onKeyDown = (event)=>{
        const root = rootRef();
        // Ignore keyboard events bubbling up the DOM tree
        if (!root?.isEqualNode(event.target)) return;
        if (core.isEnterOrSpace(event)) {
            event.preventDefault();
            openFileDialog();
        }
    };
    const onInputElementClick = (event)=>{
        event.stopPropagation();
    };
    const onFocus = ()=>setState("isFocused", true);
    const onBlur = ()=>setState("isFocused", false);
    const onClick = ()=>()=>{
            // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()
            // to ensure React can handle state changes
            // See: https://github.com/react-dropzone/react-dropzone/issues/450
            core.isIeOrEdge() ? setTimeout(openFileDialog, 0) : openFileDialog();
        };
    const getRootProps = ()=>({
            ref: setRootRef,
            role: "presentation",
            ...!props.disabled ? {
                tabIndex: 0,
                onKeyDown,
                onFocus,
                onBlur,
                onClick,
                onDragEnter,
                onDragOver,
                onDragLeave,
                onDrop
            } : {}
        });
    const getInputProps = ()=>({
            ref: setInputRef,
            type: "file",
            style: {
                display: "none"
            },
            accept: acceptAttr(),
            multiple: props.multiple,
            tabIndex: -1,
            ...!props.disabled ? {
                onChange: onDrop,
                onClick: onInputElementClick
            } : {}
        });
    return solidJs.mergeProps(state, {
        getInputProps,
        getRootProps,
        rootRef: setRootRef,
        inputRef: setInputRef
    });
}

exports.createDropzone = createDropzone;
