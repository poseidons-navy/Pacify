import * as solid_js from 'solid-js';

type AcceptProp = Record<string, string[]>;
type DropzoneOptions = {
    multiple?: boolean;
    accept?: AcceptProp;
    minSize?: number;
    maxSize?: number;
    maxFiles?: number;
    disabled?: boolean;
    onDrop: <T extends File>(acceptedFiles: T[]) => void;
};
type DropzoneState = {
    isFocused: boolean;
    isDragActive: boolean;
    isDragAccept: boolean;
    isDragReject: boolean;
    isFileDialogActive: boolean;
    acceptedFiles: File[];
};

type DropEvent = InputEvent | DragEvent | Event;
declare function createDropzone(_props: DropzoneOptions): {
    isFocused: boolean;
    isFileDialogActive: boolean;
    isDragActive: boolean;
    isDragAccept: boolean;
    isDragReject: boolean;
    acceptedFiles: File[];
    getInputProps: () => {
        onChange?: ((event: DropEvent) => void) | undefined;
        onClick?: ((event: MouseEvent) => void) | undefined;
        ref: solid_js.Setter<HTMLInputElement | null | undefined>;
        type: string;
        style: {
            display: string;
        };
        accept: string | undefined;
        multiple: boolean;
        tabIndex: number;
    };
    getRootProps: () => {
        tabIndex?: number | undefined;
        onKeyDown?: ((event: KeyboardEvent) => void) | undefined;
        onFocus?: (() => void) | undefined;
        onBlur?: (() => void) | undefined;
        onClick?: (() => () => void) | undefined;
        onDragEnter?: ((event: DragEvent) => void) | undefined;
        onDragOver?: ((event: DragEvent) => boolean) | undefined;
        onDragLeave?: ((event: DragEvent) => void) | undefined;
        onDrop?: ((event: DropEvent) => void) | undefined;
        ref: solid_js.Setter<HTMLElement | null | undefined>;
        role: "presentation";
    };
    rootRef: solid_js.Setter<HTMLElement | null | undefined>;
    inputRef: solid_js.Setter<HTMLInputElement | null | undefined>;
};

export { type AcceptProp, type DropEvent, type DropzoneOptions, type DropzoneState, createDropzone };
