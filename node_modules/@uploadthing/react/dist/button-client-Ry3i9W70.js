'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import React, { useRef, useReducer, useEffect, useState } from 'react';
import { twMerge } from 'tailwind-merge';
import { safeParseJSON, resolveMaybeUrlArg, semverLite, UploadThingError, INTERNAL_DO_NOT_USE__fatalClientError, generatePermittedFileTypes, styleFieldToClassName, styleFieldToCssObject, contentFieldToContent, generateMimeTypes, allowedContentTextLabelGenerator } from '@uploadthing/shared';
import { genUploader, version } from 'uploadthing/client';

var peerDependencies = {
	next: "*",
	react: "^17.0.2 || ^18.0.0",
	uploadthing: "^6.5.1"
};

// Ripped from https://github.com/scottrippey/react-use-event-hook
const noop = ()=>void 0;
/**
 * Suppress the warning when using useLayoutEffect with SSR. (https://reactjs.org/link/uselayouteffect-ssr)
 * Make use of useInsertionEffect if available.
 */ const useInsertionEffect = typeof window !== "undefined" ? React.useInsertionEffect || React.useLayoutEffect : noop;
/**
 * Similar to useCallback, with a few subtle differences:
 * - The returned function is a stable reference, and will always be the same between renders
 * - No dependency lists required
 * - Properties or state accessed within the callback will always be "current"
 */ function useEvent(callback) {
    // Keep track of the latest callback:
    const latestRef = React.useRef(// eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    useEvent_shouldNotBeInvokedBeforeMount);
    useInsertionEffect(()=>{
        latestRef.current = callback;
    }, [
        callback
    ]);
    // Create a stable callback that always calls the latest callback:
    // using useRef instead of useCallback avoids creating and empty array on every render
    const stableRef = React.useRef();
    if (!stableRef.current) {
        stableRef.current = function() {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, prefer-rest-params, @typescript-eslint/no-unsafe-argument
            return latestRef.current.apply(this, arguments);
        };
    }
    return stableRef.current;
}
/**
 * Render methods should be pure, especially when concurrency is used,
 * so we will throw this error if the callback is called while rendering.
 */ function useEvent_shouldNotBeInvokedBeforeMount() {
    throw new Error("INVALID_USEEVENT_INVOCATION: the callback from useEvent cannot be invoked before the component has mounted.");
}

// Ripped from https://usehooks-ts.com/react-hook/use-fetch
function useFetch(url, options) {
    const cache = useRef({});
    // Used to prevent state update if the component is unmounted
    const cancelRequest = useRef(false);
    const initialState = {
        error: undefined,
        data: undefined
    };
    // Keep state logic separated
    const fetchReducer = (state, action)=>{
        switch(action.type){
            case "loading":
                return {
                    ...initialState
                };
            case "fetched":
                return {
                    ...initialState,
                    data: action.payload
                };
            case "error":
                return {
                    ...initialState,
                    error: action.payload
                };
            default:
                return state;
        }
    };
    const [state, dispatch] = useReducer(fetchReducer, initialState);
    useEffect(()=>{
        // Do nothing if the url is not given
        if (!url) return;
        cancelRequest.current = false;
        const fetchData = async ()=>{
            dispatch({
                type: "loading"
            });
            // If a cache exists for this url, return it
            if (cache.current[url]) {
                dispatch({
                    type: "fetched",
                    payload: cache.current[url]
                });
                return;
            }
            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    throw new Error(response.statusText);
                }
                const dataOrError = await safeParseJSON(response);
                if (dataOrError instanceof Error) {
                    throw dataOrError;
                }
                cache.current[url] = dataOrError;
                if (cancelRequest.current) return;
                dispatch({
                    type: "fetched",
                    payload: dataOrError
                });
            } catch (error) {
                if (cancelRequest.current) return;
                dispatch({
                    type: "error",
                    payload: error
                });
            }
        };
        void fetchData();
        // Use the cleanup function for avoiding a possibly...
        // ...state update after the component was unmounted
        return ()=>{
            cancelRequest.current = true;
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        url
    ]);
    return state;
}

const useEndpointMetadata = (url, endpoint)=>{
    const maybeServerData = globalThis.__UPLOADTHING;
    const { data } = useFetch(// Don't fetch if we already have the data
    maybeServerData ? undefined : url.href);
    return (maybeServerData ?? data)?.find((x)=>x.slug === endpoint);
};
const INTERNAL_uploadthingHookGen = (initOpts)=>{
    if (!semverLite(peerDependencies.uploadthing, version)) {
        console.error(`!!!WARNING::: @uploadthing/react requires "uploadthing@${peerDependencies.uploadthing}", but version "${version}" is installed`);
    }
    const uploadFiles = genUploader({
        url: initOpts.url,
        package: "@uploadthing/react"
    });
    const useUploadThing = (endpoint, opts)=>{
        const [isUploading, setUploading] = useState(false);
        const uploadProgress = useRef(0);
        const fileProgress = useRef(new Map());
        const permittedFileInfo = useEndpointMetadata(initOpts.url, endpoint);
        const startUpload = useEvent(async (...args)=>{
            const files = await opts?.onBeforeUploadBegin?.(args[0]) ?? args[0];
            const input = args[1];
            setUploading(true);
            opts?.onUploadProgress?.(0);
            try {
                const res = await uploadFiles(endpoint, {
                    headers: opts?.headers,
                    files,
                    skipPolling: opts?.skipPolling,
                    onUploadProgress: (progress)=>{
                        if (!opts?.onUploadProgress) return;
                        fileProgress.current.set(progress.file, progress.progress);
                        let sum = 0;
                        fileProgress.current.forEach((p)=>{
                            sum += p;
                        });
                        const averageProgress = Math.floor(sum / fileProgress.current.size / 10) * 10;
                        if (averageProgress !== uploadProgress.current) {
                            opts?.onUploadProgress?.(averageProgress);
                            uploadProgress.current = averageProgress;
                        }
                    },
                    onUploadBegin ({ file }) {
                        if (!opts?.onUploadBegin) return;
                        opts.onUploadBegin(file);
                    },
                    // @ts-expect-error - input may not be defined on the type
                    input
                });
                opts?.onClientUploadComplete?.(res);
                return res;
            } catch (e) {
                let error;
                if (e instanceof UploadThingError) {
                    error = e;
                } else {
                    error = INTERNAL_DO_NOT_USE__fatalClientError(e);
                    console.error("Something went wrong. Please contact UploadThing and provide the following cause:", error.cause instanceof Error ? error.cause.toString() : error.cause);
                }
                opts?.onUploadError?.(error);
            } finally{
                setUploading(false);
                fileProgress.current = new Map();
                uploadProgress.current = 0;
            }
        });
        return {
            startUpload,
            isUploading,
            permittedFileInfo
        };
    };
    return useUploadThing;
};
const generateReactHelpers = (initOpts)=>{
    const url = resolveMaybeUrlArg(initOpts?.url);
    return {
        useUploadThing: INTERNAL_uploadthingHookGen({
            url
        }),
        uploadFiles: genUploader({
            url,
            package: "@uploadthing/react"
        })
    };
};

function getFilesFromClipboardEvent(event) {
    const dataTransferItems = event.clipboardData?.items;
    if (!dataTransferItems) return;
    const files = Array.from(dataTransferItems).reduce((acc, curr)=>{
        const f = curr.getAsFile();
        return f ? [
            ...acc,
            f
        ] : acc;
    }, []);
    return files;
}
function Spinner() {
    return /*#__PURE__*/ jsx("svg", {
        className: "z-10 block h-5 w-5 animate-spin align-middle text-white",
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 576 512",
        children: /*#__PURE__*/ jsx("path", {
            fill: "currentColor",
            d: "M256 32C256 14.33 270.3 0 288 0C429.4 0 544 114.6 544 256C544 302.6 531.5 346.4 509.7 384C500.9 399.3 481.3 404.6 465.1 395.7C450.7 386.9 445.5 367.3 454.3 351.1C470.6 323.8 480 291 480 255.1C480 149.1 394 63.1 288 63.1C270.3 63.1 256 49.67 256 31.1V32z"
        })
    });
}
const progressWidths = {
    0: "after:w-0",
    10: "after:w-[10%]",
    20: "after:w-[20%]",
    30: "after:w-[30%]",
    40: "after:w-[40%]",
    50: "after:w-[50%]",
    60: "after:w-[60%]",
    70: "after:w-[70%]",
    80: "after:w-[80%]",
    90: "after:w-[90%]",
    100: "after:w-[100%]"
};

/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */ function UploadButton(props) {
    // Cast back to UploadthingComponentProps<TRouter> to get the correct type
    // since the ErrorMessage messes it up otherwise
    const $props = props;
    const { mode = "auto", appendOnPaste = false } = $props.config ?? {};
    const useUploadThing = INTERNAL_uploadthingHookGen({
        url: resolveMaybeUrlArg($props.url)
    });
    const fileInputRef = useRef(null);
    const labelRef = useRef(null);
    const [uploadProgressState, setUploadProgress] = useState($props.__internal_upload_progress ?? 0);
    const [files, setFiles] = useState([]);
    const [isManualTriggerDisplayed, setIsManualTriggerDisplayed] = useState(false);
    const uploadProgress = $props.__internal_upload_progress ?? uploadProgressState;
    const { startUpload, isUploading, permittedFileInfo } = useUploadThing($props.endpoint, {
        headers: $props.headers,
        skipPolling: !$props?.onClientUploadComplete ? true : $props?.skipPolling,
        onClientUploadComplete: (res)=>{
            if (fileInputRef.current) {
                fileInputRef.current.value = "";
            }
            setIsManualTriggerDisplayed(false);
            setFiles([]);
            $props.onClientUploadComplete?.(res);
            setUploadProgress(0);
        },
        onUploadProgress: (p)=>{
            setUploadProgress(p);
            $props.onUploadProgress?.(p);
        },
        onUploadError: $props.onUploadError,
        onUploadBegin: $props.onUploadBegin,
        onBeforeUploadBegin: $props.onBeforeUploadBegin
    });
    const { fileTypes, multiple } = generatePermittedFileTypes(permittedFileInfo?.config);
    const ready = $props.__internal_ready ?? ($props.__internal_state === "ready" || fileTypes.length > 0);
    useEffect(()=>{
        const handlePaste = (event)=>{
            if (!appendOnPaste) return;
            if (document.activeElement !== labelRef.current) return;
            const pastedFiles = getFilesFromClipboardEvent(event);
            if (!pastedFiles) return;
            setFiles((prev)=>[
                    ...prev,
                    ...pastedFiles
                ]);
            if (mode === "auto") {
                const input = "input" in $props ? $props.input : undefined;
                void startUpload(files, input);
            }
        };
        window.addEventListener("paste", handlePaste);
        return ()=>{
            window.removeEventListener("paste", handlePaste);
        };
    }, [
        startUpload,
        appendOnPaste,
        $props,
        files,
        mode,
        fileTypes
    ]);
    const getUploadButtonText = (fileTypes)=>{
        if (isManualTriggerDisplayed) return `Upload ${files.length} file${files.length === 1 ? "" : "s"}`;
        if (fileTypes.length === 0) return "Loading...";
        return `Choose File${multiple ? `(s)` : ``}`;
    };
    const getUploadButtonContents = (fileTypes)=>{
        if (state !== "uploading") {
            return getUploadButtonText(fileTypes);
        }
        if (uploadProgress === 100) {
            return /*#__PURE__*/ jsx(Spinner, {});
        }
        return /*#__PURE__*/ jsxs("span", {
            className: "z-50",
            children: [
                uploadProgress,
                "%"
            ]
        });
    };
    const getInputProps = ()=>({
            type: "file",
            ref: fileInputRef,
            multiple,
            accept: generateMimeTypes(fileTypes ?? [])?.join(", "),
            onChange: (e)=>{
                if (!e.target.files) return;
                const selectedFiles = Array.from(e.target.files);
                if (mode === "manual") {
                    setFiles(selectedFiles);
                    setIsManualTriggerDisplayed(true);
                    return;
                }
                const input = "input" in $props ? $props.input : undefined;
                void startUpload(selectedFiles, input);
            },
            disabled: $props.__internal_button_disabled ?? !ready,
            ...!($props.__internal_button_disabled ?? !ready) ? {
                tabIndex: 0
            } : {}
        });
    const styleFieldArg = {
        ready: ready,
        isUploading: $props.__internal_state === "uploading" || isUploading,
        uploadProgress,
        fileTypes
    };
    const state = (()=>{
        if ($props.__internal_state) return $props.__internal_state;
        if (!ready) return "readying";
        if (ready && !isUploading) return "ready";
        return "uploading";
    })();
    const renderClearButton = ()=>/*#__PURE__*/ jsx("button", {
            onClick: ()=>{
                setFiles([]);
                setIsManualTriggerDisplayed(false);
                if (fileInputRef.current) {
                    fileInputRef.current.value = "";
                }
            },
            className: twMerge("h-[1.25rem] cursor-pointer rounded border-none bg-transparent text-gray-500 transition-colors hover:bg-slate-200 hover:text-gray-600", styleFieldToClassName($props.appearance?.clearBtn, styleFieldArg)),
            style: styleFieldToCssObject($props.appearance?.clearBtn, styleFieldArg),
            "data-state": state,
            "data-ut-element": "clear-btn",
            children: contentFieldToContent($props.content?.clearBtn, styleFieldArg) ?? "Clear"
        });
    const renderAllowedContent = ()=>/*#__PURE__*/ jsx("div", {
            className: twMerge("h-[1.25rem]  text-xs leading-5 text-gray-600", styleFieldToClassName($props.appearance?.allowedContent, styleFieldArg)),
            style: styleFieldToCssObject($props.appearance?.allowedContent, styleFieldArg),
            "data-state": state,
            "data-ut-element": "allowed-content",
            children: contentFieldToContent($props.content?.allowedContent, styleFieldArg) ?? allowedContentTextLabelGenerator(permittedFileInfo?.config)
        });
    return /*#__PURE__*/ jsxs("div", {
        className: twMerge("flex flex-col items-center justify-center gap-1", $props.className, styleFieldToClassName($props.appearance?.container, styleFieldArg)),
        style: styleFieldToCssObject($props.appearance?.container, styleFieldArg),
        "data-state": state,
        children: [
            /*#__PURE__*/ jsxs("label", {
                className: twMerge("relative flex h-10 w-36 cursor-pointer items-center justify-center overflow-hidden rounded-md text-white after:transition-[width] after:duration-500 focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2", state === "readying" && "cursor-not-allowed bg-blue-400", state === "uploading" && `bg-blue-400 after:absolute after:left-0 after:h-full after:bg-blue-600 after:content-[''] ${progressWidths[uploadProgress]}`, state === "ready" && "bg-blue-600", styleFieldToClassName($props.appearance?.button, styleFieldArg)),
                style: styleFieldToCssObject($props.appearance?.button, styleFieldArg),
                "data-state": state,
                "data-ut-element": "button",
                ref: labelRef,
                onClick: (e)=>{
                    if (isManualTriggerDisplayed) {
                        e.preventDefault();
                        e.stopPropagation();
                        const input = "input" in $props ? $props.input : undefined;
                        void startUpload(files, input);
                    }
                },
                children: [
                    /*#__PURE__*/ jsx("input", {
                        ...getInputProps(),
                        className: "sr-only"
                    }),
                    contentFieldToContent($props.content?.button, styleFieldArg) ?? getUploadButtonContents(fileTypes)
                ]
            }),
            mode === "manual" && files.length > 0 ? renderClearButton() : renderAllowedContent()
        ]
    });
}

export { INTERNAL_uploadthingHookGen as I, Spinner as S, UploadButton as U, generateReactHelpers as a, getFilesFromClipboardEvent as g, progressWidths as p };
